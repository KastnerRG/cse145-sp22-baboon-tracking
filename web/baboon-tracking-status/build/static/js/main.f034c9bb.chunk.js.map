{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","props","state","data","a","config","apiKey","authDomain","databaseURL","firebase","apps","length","app","initializeApp","database","inputRef","ref","latestRef","child","get","val","latestMetricRef","metrics","chartData","map","m","idx","totalBaboons","true_positive","false_negative","x","y","false_positive","this","setState","datasets","label","pointRadius","options","legend","display","title","text","scales","xAxes","type","scaleLabel","labelString","yAxes","ticks","callback","value","index","values","Math","round","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAkGeA,E,kDAxFb,WAAYC,GAAY,IAAD,8BACrB,cAAMA,IAEDC,MAAQ,CAAEC,KAAM,IAHA,E,4FAMvB,wCAAAC,EAAA,6DACMC,EAAS,CACXC,OAAQ,0CACRC,WAAY,2CACZC,YAAa,iEAGVC,IAASC,KAAKC,OAGjBF,IAASG,MAFTH,IAASI,cAAcR,GAKrBS,EAAWL,IAASK,WACpBC,EAAWD,EAASE,IAAI,iBACxBC,EAAYF,EAASG,MAAM,UAfjC,KAgBwBH,EAhBxB,SAgB8CE,EAAUE,MAhBxD,0BAgB+DC,MAAzDC,EAhBN,KAgBiCH,MAhBjC,0BAkB8BG,EAAgBF,MAlB9C,QAkBMG,EAlBN,OAkBqDF,MAE/CG,EAAYD,EAAQE,KAAI,SAACC,EAAGC,GAC9B,IAAIC,EAAeF,EAAEG,cAAgBH,EAAEI,eAGvC,MAAO,CACLC,EAAGJ,EAAM,GACTK,GAJeN,EAAEI,eAAiBJ,EAAEO,gBAIpBL,MAIpBM,KAAKC,SAAS,CACZ/B,KAAM,CACJgC,SAAU,CAAC,CACTC,MAAO,aACPjC,KAAMoB,EACNc,YAAa,OAnCrB,iD,0EAyCA,WACE,OACE,8BAGE,cAAC,OAAD,CAAMlC,KAAM8B,KAAK/B,MAAMC,KAAMmC,QAAS,CACpCC,OAAQ,CACNC,SAAS,GAEXC,MAAO,CACLD,SAAS,EACTE,KAAM,0BAERC,OAAQ,CACNC,MAAO,CAAC,CACNC,KAAM,SACNC,WAAY,CACVN,SAAS,EACTO,YAAa,aAGjBC,MAAO,CAAC,CACNH,KAAM,SACNI,MAAO,CAELC,SAAU,SAAUC,EAAeC,EAAeC,GAChD,OAAOC,KAAKC,MAAc,IAARJ,GAAe,MAGrCL,WAAY,CACVN,SAAS,EACTO,YAAa,0B,GA/EXS,IAAMC,WCKTC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.f034c9bb.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Line } from 'react-chartjs-2';\nimport firebase from 'firebase';\n\ninterface IState {\n  data?: {};\n}\n\nclass App extends React.Component<{}, IState> {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = { data: {} };\n  }\n\n  async componentDidMount() {\n    var config = {\n      apiKey: \"AIzaSyB83cPhCkA-xv-K6UOZAc0zuH7sxDuxHlE\",\n      authDomain: \"baboon-cli-1598770091002.firebaseapp.com\",\n      databaseURL: \"https://baboon-cli-1598770091002-default-rtdb.firebaseio.com/\",\n    };\n\n    if (!firebase.apps.length) {\n      firebase.initializeApp(config);\n    } else {\n      firebase.app();\n    }\n\n    let database = firebase.database();\n    let inputRef = database.ref(\"metrics/input\");\n    let latestRef = inputRef.child(\"latest\");\n    let latestMetricRef = inputRef.child((await latestRef.get()).val());\n\n    let metrics: any[] = (await latestMetricRef.get()).val()\n\n    let chartData = metrics.map((m, idx) => {\n      let totalBaboons = m.true_positive + m.false_negative;\n      let totalError = m.false_negative + m.false_positive;\n\n      return {\n        x: idx / 30,\n        y: totalError / totalBaboons\n      };\n    });\n\n    this.setState({\n      data: {\n        datasets: [{\n          label: 'Error Rate',\n          data: chartData,\n          pointRadius: 0\n        }],\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {/* <h1>Baboons on the Move Status</h1> */}\n\n        <Line data={this.state.data} options={{\n          legend: {\n            display: false\n          },\n          title: {\n            display: true,\n            text: \"Error Rate vs. Seconds\"\n          },\n          scales: {\n            xAxes: [{\n              type: 'linear',\n              scaleLabel: {\n                display: true,\n                labelString: \"Seconds\"\n              }\n            }],\n            yAxes: [{\n              type: 'linear',\n              ticks: {\n                // Include a dollar sign in the ticks\n                callback: function (value: number, index: number, values: number[]) {\n                  return Math.round(value * 100) + '%';\n                }\n              },\n              scaleLabel: {\n                display: true,\n                labelString: \"Error Rate\"\n              }\n            }]\n          }\n        }} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}