{"version":3,"sources":["Metrics.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Metrics","props","state","errorRateData","learningData","firebase","apps","length","app","initializeApp","apiKey","authDomain","databaseURL","database","dateString","split","datePart","timePart","year","parseInt","substr","month","day","hour","minute","second","Date","UTC","a","this","getFirebaseDatabase","metricsRef","ref","inputRef","child","latestRef","get","latest","val","latestMetricRef","latestUpdate","parseDate","metrics","chartData","map","m","idx","totalBaboons","true_positive","false_negative","x","y","false_positive","csv","btoa","concat","join","averageErrorRate","Math","round","reduce","b","data","optimizeRef","lossesRef","losses","Object","entries","l","percentImprovement","slice","d","getChartData","getLearningData","setState","errorRateCSV","datasets","label","pointRadius","errorRateLastUpdated","learningCSV","learningPercentImprovement","learningLatestUpdate","errorRateLastUpdate","options","legend","display","title","text","scales","xAxes","type","scaleLabel","labelString","yAxes","ticks","callback","value","index","values","toLocaleDateString","toLocaleTimeString","download","href","React","Component","App","document","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.78411012.chunk.js","sourcesContent":["import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport firebase from 'firebase';\n\ninterface IState {\n    errorRateLastUpdated?: number;\n    averageErrorRate?: number;\n    errorRateCSV?: string;\n    errorRateData?: {};\n    learningData?: {};\n    learningCSV?: {};\n    learningPercentImprovement?: number;\n    learningLatestUpdate?: number;\n}\n\nclass Metrics extends React.Component<{}, IState> {\n    constructor(props: {}) {\n        super(props);\n\n        this.state = {\n            errorRateData: {},\n            learningData: {}\n        };\n    }\n\n    getFirebaseDatabase() {\n        var config = {\n            apiKey: \"AIzaSyB83cPhCkA-xv-K6UOZAc0zuH7sxDuxHlE\",\n            authDomain: \"baboon-cli-1598770091002.firebaseapp.com\",\n            databaseURL: \"https://baboon-cli-1598770091002-default-rtdb.firebaseio.com/\",\n        };\n\n        if (!firebase.apps.length) {\n            firebase.initializeApp(config);\n        } else {\n            firebase.app();\n        }\n\n        return firebase.database();\n    }\n\n    private parseDate(dateString: string): number {\n        const [datePart, timePart] = dateString.split('-');\n        const year = parseInt(datePart.substr(0, 4));\n        const month = parseInt(datePart.substr(4, 2)) - 1;\n        const day = parseInt(datePart.substr(6, 2));\n\n        const hour = parseInt(timePart.substr(0, 2));\n        const minute = parseInt(timePart.substr(2, 2));\n        const second = parseInt(timePart.substr(4, 2));\n\n        return Date.UTC(year, month, day, hour, minute, second);\n    }\n\n    async getChartData() {\n        const database = this.getFirebaseDatabase();\n\n        const metricsRef = database.ref(\"metrics\")\n        const inputRef = metricsRef.child(\"input\");\n        const latestRef = inputRef.child(\"latest\");\n\n        const latest: string = (await latestRef.get()).val();\n        const latestMetricRef = inputRef.child(latest);\n        const latestUpdate = this.parseDate(latest);\n\n        const metrics: any[] = (await latestMetricRef.get()).val()\n\n        const chartData = metrics.map((m, idx) => {\n            const totalBaboons = m.true_positive + m.false_negative;\n            const totalError = m.false_negative + m.false_positive;\n\n            return {\n                x: idx / 30,\n                y: totalError / totalBaboons\n            };\n        });\n\n        const csv = btoa([\"Frame, True Positive, False Negative, False Positive\"]\n            .concat(metrics.map((m, idx) => `${idx}, ${m.true_positive}, ${m.false_negative}, ${m.false_positive}`))\n            .join(\"\\n\"));\n\n        const averageErrorRate = Math.round(chartData.map(x => x.y).reduce((a, b) => a + b) * 10000 / chartData.length) / 100;\n\n        return {\n            data: chartData,\n            csv: csv,\n            averageErrorRate: averageErrorRate,\n            latestUpdate: latestUpdate\n        }\n    }\n\n    async getLearningData() {\n        const database = this.getFirebaseDatabase();\n\n        const optimizeRef = database.ref(\"optimize\");\n        const inputRef = optimizeRef.child(\"input\");\n        const latestRef = inputRef.child(\"latest\");\n        const lossesRef = inputRef.child(\"losses\");\n\n        const latest: string = (await latestRef.get()).val();\n        const latestUpdate = this.parseDate(latest);\n\n        const losses = (await lossesRef.get()).val();\n\n        const data = Object.entries(losses).map((l, idx) => {\n            const [, value] = l;\n\n            return {\n                x: idx + 1,\n                y: value as number\n            };\n        });\n\n        let percentImprovement: number = 0;\n        if (data.length > 1) {\n            percentImprovement = Math.round((data[0].y - data.slice(-1)[0].y) * 10000 / data[0].y) / 100;\n        }\n\n        const csv = btoa([\"Iteration, Loss\"]\n            .concat(data.map(d => `${d.x}, ${d.y}`))\n            .join(\"\\n\"));\n\n        return {\n            csv: csv,\n            data: data,\n            percentImprovement: percentImprovement,\n            latestUpdate: latestUpdate\n        };\n    }\n\n    async componentDidMount() {\n        const chartData = await this.getChartData();\n        const learningData = await this.getLearningData();\n\n        this.setState({\n            averageErrorRate: chartData.averageErrorRate,\n            errorRateCSV: chartData.csv,\n            errorRateData: {\n                datasets: [{\n                    label: 'Error Rate',\n                    data: chartData.data,\n                    pointRadius: 0\n                }],\n            },\n            errorRateLastUpdated: chartData.latestUpdate,\n            learningData: {\n                datasets: [{\n                    label: 'Loss',\n                    data: learningData.data\n                }],\n            },\n            learningCSV: learningData.csv,\n            learningPercentImprovement: learningData.percentImprovement,\n            learningLatestUpdate: learningData.latestUpdate\n        });\n    }\n\n    render() {\n        const errorRateLastUpdate = new Date(this.state.errorRateLastUpdated || 0);\n        const learningLatestUpdate = new Date(this.state.learningLatestUpdate || 0);\n\n        return (\n            <div>\n                <Line data={this.state.errorRateData} options={{\n                    legend: {\n                        display: false\n                    },\n                    title: {\n                        display: true,\n                        text: \"Error Rate vs. Seconds\"\n                    },\n                    scales: {\n                        xAxes: [{\n                            type: 'linear',\n                            scaleLabel: {\n                                display: true,\n                                labelString: \"Seconds\"\n                            }\n                        }],\n                        yAxes: [{\n                            type: 'linear',\n                            ticks: {\n                                // Include a dollar sign in the ticks\n                                callback: function (value: number, index: number, values: number[]) {\n                                    return Math.round(value * 100) + '%';\n                                }\n                            },\n                            scaleLabel: {\n                                display: true,\n                                labelString: \"Error Rate\"\n                            }\n                        }]\n                    }\n                }} />\n\n                <p>Last Updated: {`${errorRateLastUpdate.toLocaleDateString()} ${errorRateLastUpdate.toLocaleTimeString()}`}</p>\n                <p>Average Error Rate: {this.state.averageErrorRate}%</p>\n                <a download='ErrorRate.csv' href={`data:text/csv;base64,${this.state.errorRateCSV}`}>Download CSV</a>\n\n                <Line data={this.state.learningData} options={{\n                    legend: {\n                        display: false\n                    },\n                    title: {\n                        display: true,\n                        text: \"Loss vs. Iterations\"\n                    },\n                    scales: {\n                        xAxes: [{\n                            type: 'linear',\n                            scaleLabel: {\n                                display: true,\n                                labelString: \"Iterations\"\n                            }\n                        }],\n                        yAxes: [{\n                            type: 'linear',\n                            scaleLabel: {\n                                display: true,\n                                labelString: \"Loss\"\n                            }\n                        }]\n                    }\n                }} />\n                <p>Last Updated: {`${learningLatestUpdate.toLocaleDateString()} ${learningLatestUpdate.toLocaleTimeString()}`}</p>\n                <p>Percent Improvement: {this.state.learningPercentImprovement}%</p>\n                <a download='Learning.csv' href={`data:text/csv;base64,${this.state.learningCSV}`}>Download CSV</a>\n            </div>\n        );\n    }\n}\n\nexport default Metrics;\n","import React from 'react';\nimport './App.css';\nimport Metrics from './Metrics';\n\nclass App extends React.Component<{}, {}> {\n  componentDidMount() {\n    document.title = \"Baboons on the Move Status\";\n  }\n\n  render() {\n    return (\n      <div>\n        {/* <h1>Baboons on the Move Status</h1> */}\n\n        <Metrics />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}