{"version":3,"sources":["Metrics.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Metrics","props","state","data","a","config","apiKey","authDomain","databaseURL","firebase","apps","length","app","initializeApp","database","inputRef","ref","latestRef","child","get","val","latestMetricRef","metrics","chartData","map","m","idx","totalBaboons","true_positive","false_negative","x","y","false_positive","csv","btoa","concat","join","this","setState","datasets","label","pointRadius","options","legend","display","title","text","scales","xAxes","type","scaleLabel","labelString","yAxes","ticks","callback","value","index","values","Math","round","download","href","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAuGeA,E,kDA7FX,WAAYC,GAAY,IAAD,8BACnB,cAAMA,IAEDC,MAAQ,CAAEC,KAAM,IAHF,E,4FAMvB,0CAAAC,EAAA,6DACQC,EAAS,CACTC,OAAQ,0CACRC,WAAY,2CACZC,YAAa,iEAGZC,IAASC,KAAKC,OAGfF,IAASG,MAFTH,IAASI,cAAcR,GAKvBS,EAAWL,IAASK,WACpBC,EAAWD,EAASE,IAAI,iBACxBC,EAAYF,EAASG,MAAM,UAfnC,KAgB0BH,EAhB1B,SAgBgDE,EAAUE,MAhB1D,0BAgBiEC,MAAzDC,EAhBR,KAgBmCH,MAhBnC,0BAkBgCG,EAAgBF,MAlBhD,QAkBQG,EAlBR,OAkBuDF,MAE/CG,EAAYD,EAAQE,KAAI,SAACC,EAAGC,GAC5B,IAAIC,EAAeF,EAAEG,cAAgBH,EAAEI,eAGvC,MAAO,CACHC,EAAGJ,EAAM,GACTK,GAJaN,EAAEI,eAAiBJ,EAAEO,gBAIlBL,MAIpBM,EAAMC,KAAK,CAAC,mDACXC,OAAOb,EAAQE,KAAI,SAACC,EAAGC,GAAJ,gBAAeA,EAAf,aAAuBD,EAAEG,cAAzB,aAA2CH,EAAEI,eAA7C,aAAgEJ,EAAEO,oBACrFI,KAAK,OAEVC,KAAKC,SAAS,CACVL,IAAKA,EACL9B,KAAM,CACFoC,SAAU,CAAC,CACPC,MAAO,aACPrC,KAAMoB,EACNkB,YAAa,OAxC7B,iD,0EA8CA,WACI,OACI,gCACI,cAAC,OAAD,CAAMtC,KAAMkC,KAAKnC,MAAMC,KAAMuC,QAAS,CAClCC,OAAQ,CACJC,SAAS,GAEbC,MAAO,CACHD,SAAS,EACTE,KAAM,0BAEVC,OAAQ,CACJC,MAAO,CAAC,CACJC,KAAM,SACNC,WAAY,CACRN,SAAS,EACTO,YAAa,aAGrBC,MAAO,CAAC,CACJH,KAAM,SACNI,MAAO,CAEHC,SAAU,SAAUC,EAAeC,EAAeC,GAC9C,OAAOC,KAAKC,MAAc,IAARJ,GAAe,MAGzCL,WAAY,CACRN,SAAS,EACTO,YAAa,oBAM7B,mBAAGS,SAAS,WAAWC,KAAI,+BAA0BxB,KAAKnC,MAAM+B,KAAhE,iC,GAxFM6B,IAAMC,WCObC,E,4JAXb,WACE,OACE,8BAGE,cAAC,EAAD,U,GANUF,IAAMC,WCUTE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.a8509457.chunk.js","sourcesContent":["import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport firebase from 'firebase';\n\ninterface IState {\n    csv?: string;\n    data?: {};\n}\n\nclass Metrics extends React.Component<{}, IState> {\n    constructor(props: {}) {\n        super(props);\n\n        this.state = { data: {} };\n    }\n\n    async componentDidMount() {\n        var config = {\n            apiKey: \"AIzaSyB83cPhCkA-xv-K6UOZAc0zuH7sxDuxHlE\",\n            authDomain: \"baboon-cli-1598770091002.firebaseapp.com\",\n            databaseURL: \"https://baboon-cli-1598770091002-default-rtdb.firebaseio.com/\",\n        };\n\n        if (!firebase.apps.length) {\n            firebase.initializeApp(config);\n        } else {\n            firebase.app();\n        }\n\n        let database = firebase.database();\n        let inputRef = database.ref(\"metrics/input\");\n        let latestRef = inputRef.child(\"latest\");\n        let latestMetricRef = inputRef.child((await latestRef.get()).val());\n\n        let metrics: any[] = (await latestMetricRef.get()).val()\n\n        let chartData = metrics.map((m, idx) => {\n            let totalBaboons = m.true_positive + m.false_negative;\n            let totalError = m.false_negative + m.false_positive;\n\n            return {\n                x: idx / 30,\n                y: totalError / totalBaboons\n            };\n        });\n\n        let csv = btoa([\", True Positive, False Negative, False Positive\"]\n            .concat(metrics.map((m, idx) => `${idx}, ${m.true_positive}, ${m.false_negative}, ${m.false_positive}`))\n            .join(\"\\n\"));\n\n        this.setState({\n            csv: csv,\n            data: {\n                datasets: [{\n                    label: 'Error Rate',\n                    data: chartData,\n                    pointRadius: 0\n                }],\n            }\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Line data={this.state.data} options={{\n                    legend: {\n                        display: false\n                    },\n                    title: {\n                        display: true,\n                        text: \"Error Rate vs. Seconds\"\n                    },\n                    scales: {\n                        xAxes: [{\n                            type: 'linear',\n                            scaleLabel: {\n                                display: true,\n                                labelString: \"Seconds\"\n                            }\n                        }],\n                        yAxes: [{\n                            type: 'linear',\n                            ticks: {\n                                // Include a dollar sign in the ticks\n                                callback: function (value: number, index: number, values: number[]) {\n                                    return Math.round(value * 100) + '%';\n                                }\n                            },\n                            scaleLabel: {\n                                display: true,\n                                labelString: \"Error Rate\"\n                            }\n                        }]\n                    }\n                }} />\n\n                <a download='Data.csv' href={`data:text/csv;base64,${this.state.csv}`}>Download CSV</a>\n            </div>\n        );\n    }\n}\n\nexport default Metrics;\n","import React from 'react';\nimport './App.css';\nimport Metrics from './Metrics';\n\nclass App extends React.Component<{}, {}> {\n  render() {\n    return (\n      <div>\n        {/* <h1>Baboons on the Move Status</h1> */}\n\n        <Metrics />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}